
plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.0.0' apply false
}

ext {
    deployDir = 'Makanism'
}

copy {
    IncludedBuild base = gradle.includedBuild('Makanism')
    from "${base.projectDir}/dependencies.gradle"
    from "${base.projectDir}/extern.gradle"
    into rootDir
}
apply from: 'dependencies.gradle'
apply from: 'extern.gradle'

dependencies {
    gradle.ext.modules.forEach { String module ->
        implementation project(module)
    }
}

class ServiceFileCreator extends DefaultTask {
    private String provides
    private Map<String, String> serviceProviders = [:]

    @TaskAction
    def execute(){
        // TODO : Use build dir to check for update
        Closure config = {
            metaInf {
                getServiceProviders().each { service, content ->
                    File file = File.createTempFile("_service_$service", '.tmp').with(true) {
                        it.deleteOnExit()
                        it.write content
                    }
                    from(file) {
                        into "services"
                        rename { service }
                    }
                }
            }
        }

        this.project.tasks.jar.configure config
        this.project.tasks.shadowJar.configure config
    }

    def getServiceProviders(){
        return serviceProviders
    }

    /**
     * The class path of the service interface that is implemented
     * @param clazz Class path of the service interface that is implemented
     * @return this
     */
    @Input
    ServiceFileCreator provides(String clazz){
        Objects.requireNonNull(clazz)
        this.provides = clazz
        return this
    }

    /**
     * The class path of the service provider
     * @param clazz Class path of the service provider
     * @return this
     */
    @Input
    ServiceFileCreator with(String clazz){
        if (this.provides){
            if (!this.serviceProviders[this.provides])
                this.serviceProviders[this.provides] = clazz + '\n'
            else
                this.serviceProviders[this.provides] = this.serviceProviders[this.provides] + clazz + '\n'
            this.provides = null
        }
        return this
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        extern
        compile.extendsFrom extern
    }

    shadowJar {
        exclude 'module-info.class'
        configurations = [project.configurations.extern]
        destinationDir = file("$rootProject.projectDir/$deployDir/modules")
    }

    task relocateAll(type: com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation) {
        dependsOn tasks.jar
        target = tasks.shadowJar
        prefix = "deps_$project.name".replace('-','_')
    }

    tasks.shadowJar.dependsOn tasks.relocateAll, tasks.jar
    rootProject.tasks.build.dependsOn tasks.shadowJar

    task services(type: ServiceFileCreator)
    tasks.jar.dependsOn tasks.services
}

jar.enabled = false     // disable jar creation for root project

distZip.enabled = false
distTar.enabled = false

task setup {
    IncludedBuild base = gradle.includedBuild('Makanism')
    dependsOn build, base.task(':moveMainJar')
    shouldRunAfter build, base.task(':moveMainJar')

    doLast {
        String deploy = "$rootDir/$deployDir"
        println "Creating folders..."
        mkdir "$deploy"
        mkdir "$deploy/config"
        mkdir "$deploy/lib"
        mkdir "$deploy/modules"

        println "Deleting old files..."
        delete {
           delete "$deploy/$outputLibDir"
        }
        println "Moving from $base.projectDir/$outputDir..."
        ant.move(file: "$base.projectDir/$outputDir", toFile: "$deploy")
    }
}

task createStartScripts(type: CreateStartScripts) {
    IncludedBuild base = gradle.includedBuild('Makanism')
    outputs.upToDateWhen { false }      // never skip

    defaultJvmOpts = ["-Xmx200M", "-Xms200M", "-cp Makanism.jar;modules/*", "-Dlog4j.skipJansi=false"]
    outputDir = file("$rootDir/$deployDir")
    mainClass.set(bot_main_class as String)
    applicationName = bot_name

    unixStartScriptGenerator.template = resources.text.fromFile("$rootDir/resources/unix_template.txt")
    windowsStartScriptGenerator.template = resources.text.fromFile("$rootDir/resources/windows_template.txt")
}
